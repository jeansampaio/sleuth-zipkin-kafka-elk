/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id "org.sonarqube" version '2.8'
    id 'jacoco'
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'application'
}

application {
    mainClassName = 'com.wysoft.order.OrderServiceApplication'
}

group = 'com.wynsoft'
version = '1.0.0'
description = 'order-service'
sourceCompatibility = '11'

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
    maven {
        url 'https://packages.confluent.io/maven/'
    }
    flatDir {
        dirs 'libs'
    }
}

ext {
    set('springCloudVersion', "Hoxton.SR6")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    all {
        //   exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'com.zaxxer', module: 'HikariCP'
    }
}

dependencies {

    // Swagger
    implementation 'io.swagger:swagger-annotations:1.5.24'
    implementation "io.springfox:springfox-swagger2:2.9.2"
    implementation "io.springfox:springfox-swagger-ui:2.9.2"

    // Spring Cloud
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:2.2.3.RELEASE' // diff

    // Spring Cloud Stream
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'

    // Kafka
    implementation 'org.apache.kafka:kafka-streams'
    implementation 'org.springframework.kafka:spring-kafka'

    // Security
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    //implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

   // https://mvnrepository.com/artifact/org.mapstruct/mapstruct-jdk8
    implementation group: 'org.mapstruct', name: 'mapstruct-jdk8', version: '1.3.0.Final'

    // Tomcat
    runtimeOnly 'org.apache.tomcat:tomcat-jdbc:9.0.36'

    // Logstash
    implementation 'net.logstash.logback:logstash-logback-encoder:6.1'
    implementation 'org.codehaus.janino:janino:2.5.16'

    // Utils
    runtimeOnly 'org.springframework.boot:spring-boot-devtools:2.3.1.RELEASE'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.3.1.RELEASE'

    // Lombock
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    // Lo4j
    implementation 'org.apache.logging.log4j:log4j:2.13.3'
    implementation 'org.apache.logging.log4j:log4j-web:2.13.3'
    //implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.3' // Conflit

    // Apache Commons
    implementation 'org.apache.commons:commons-lang3:3.11'

    // Database
    runtimeOnly 'com.oracle.ojdbc:ojdbc8:19.3.0.0'
    runtimeOnly 'org.postgresql:postgresql:42.2.14'
    runtime("com.h2database:h2:1.3.176")

    // Cybersource
    compile group: 'com.cybersource', name: 'cybersource-rest-client-java', version: '0.0.29'

    // Test
    implementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.3.3'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    //testImplementation 'org.springframework.cloud:spring-cloud-stream:test-binder@test-jar'
    testImplementation("org.springframework.cloud:spring-cloud-stream") {
        artifact {
            name = "spring-cloud-stream"
            extension = "jar"
            type ="test-jar"
            classifier = "test-binder"
        }
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/JacocoReportDir")
}

jacocoTestReport {

    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/client/**',
                            '**/configuration/**',
                            '**/exception/**',
                            '**/i18n/**',
                            '**/model/**',
                            '**/dto/**',
                            '**/repository/**',
                            '**/viewmodel/**',
                            '**/entity/**',
                            '**/util/**',
                            '**/api/**',
                            '**/dao/**',
                            '**/dao/entity/**',
                            '**/ServicesMainApplication*',
                            '**/config/**',
                            '**/mapper/**',
                            '**/enums/**',
                            '**/validator/**',
                            '**/specification/**'
                    ])
        })
    }
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

sonarqube {
    properties {
        property 'sonar.coverage.exclusions',
                [
                        '**/configuration/**',
                        '**/exception/**',
                        '**/i18n/**',
                        '**/model/**',
                        '**/dto/**',
                        '**/repository/**',
                        '**/viewmodel/**',
                        '**/entity/**',
                        '**/util/**',
                        '**/api/**',
                        '**/dao/**',
                        '**/dao/entity/**',
                        '**/CyberSourceIntegrationMainApplication*',
                        '**/config/**',
                        '**/common/**',
                        '**/exception/**',
                        '**/util/**',
                        '**/event/**'
                ]
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/JacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

